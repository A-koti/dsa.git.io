#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 100

char stack[MAX];
char infix[MAX], postfix[MAX], prefix[MAX];
int top = -1;


char* str_rev(char* str)
{
	int temp;
	int len_str = strlen(str) -1;
	for(int i = 0;i<len_str;i++)
	{
		temp = str[i];
		str[i] = str[len_str -i -1];
		str[len_str - i -1] = temp;
	}
	return str;
}


int precedence(char symbol) {
	switch (symbol) {
		case '^':
			return 3;
		case '*':
		case '/':
			return 2;
		case '+': 
		case '-':
			return 1;
		default:
			return 0;
	}
}

int space(char c) {
	if (c == ' ' || c == '\t') {
		return 1;
	} else {
		return 0;
	}
}
	
void push(char c) {
	if (top == MAX - 1) {
		printf("Overflow");
		return;
	}
	top++;
	stack[top] = c;
}

char pop() {
	char c;
	if (top == -1) {
		printf("Overflow\n");
		exit(1);
	}
	c = stack[top];
	top = top - 1;
	return c;
}

int isEmpty() {
	if (top == -1) {
		return 1;
	} else {
		return 0;
	}
}
	
char* infixtopostfix() {
	int i, j = 0;
	char symbol, next; 
	for (i = 0; i < strlen(infix); i++) {
		symbol = infix[i];
		if (!space(symbol)) {
			switch (symbol) {
				case '(':
					push(symbol);
					break;
				case ')':
					while ((next = pop()) != '(') {
						postfix[j++] = next;
					}
					break;
				case '+':
				case '-':
				case '*':
				case '/':
				case '^':
					while (!isEmpty() && precedence(stack[top]) >= precedence(symbol)) {
						postfix[j++] = pop();
					}
					push(symbol);
					break;
				default:
					postfix[j++] = symbol;
			}
		}
	}
	
	while (!isEmpty()) {
		postfix[j++] = pop();
	}
	
	postfix[j] = '\0';
	return postfix;
}
	
void print() {
	int i = 0;
	printf("The Equivalent postfix expression is: ");
	while (postfix[i]) {
		printf("%c", postfix[i++]);
	}
	printf("\n");
}		 

int main() {
	printf("Enter the Infix Expression: ");
	fgets(infix, MAX, stdin);
	strrev(infix);
	char* prefix = strrev(infixtopostfix());
	printf("%s\n",prefix);
	return 0;
}
