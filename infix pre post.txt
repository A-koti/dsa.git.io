#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100
int isOperator(char c) {
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^')
        return 1;
    return 0;
}

int getPrecedence(char c) {
    if (c == '^')
        return 3;
    else if (c == '*' || c == '/')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return 0;
}

void reverse(char str[]) {
    int length = strlen(str);
    int i;

    for (i = 0; i < length; i++) {
        if (str[i] == '(')
            str[i] = ')';
        else if (str[i] == ')')
            str[i] = '(';
    }
    for (i = 0; i < length / 2; i++) {
        char temp = str[i];
        str[i] = str[length - i - 1];
        str[length - i - 1] = temp;
    }
}


void i2p(char* infix, char* postfix) {
    char operators[MAX_SIZE];
    char output[MAX_SIZE];
    int top = -1;
    int outputTop = -1;
    int i;

    for (i = 0; infix[i] != '\0'; i++) {
        if (infix[i] == ' ' || infix[i] == '\t')
            continue;
        else if (isOperator(infix[i])) {
            while (top != -1 && getPrecedence(operators[top]) >= getPrecedence(infix[i])) {
                output[++outputTop] = operators[top--];
            }
            operators[++top] = infix[i];
        } else if (infix[i] == '(') {
            operators[++top] = infix[i];
        } else if (infix[i] == ')') {
            while (top != -1 && operators[top] != '(') {
                output[++outputTop] = operators[top--];
            }
            if (top != -1) {
                top--;
            }
        } else {
            output[++outputTop] = infix[i];
        }
    }

    while (top != -1) {
        output[++outputTop] = operators[top--];
    }
    output[++outputTop] = '\0';
    strcpy(postfix, output);
}

int main() {
    char infix[MAX_SIZE], reversed[MAX_SIZE], prefix[MAX_SIZE], postfix[MAX_SIZE];
    printf("Enter the infix expression: ");
    gets(infix);
    strcpy(reversed, infix);
    reverse(reversed);
    i2p(reversed, prefix);
    reverse(prefix);
    printf("Prefix expression: %s\n", prefix);
    i2p(infix, postfix);
    printf("Postfix expression: %s\n", postfix);

}
